'use client'

import React, { useState, useMemo, useEffect } from 'react'
import { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ScatterChart, Scatter } from 'recharts'
import { TrendingUp, BarChart3, Activity, Zap, Download, Share2 } from 'lucide-react'
import { useSimulation } from "../app/api/hooks/useSimulation"

interface Props {
  question: string
  selectedChartType: string
  selectedMetrics: string[]
  domainColor: {
    primary: string
    secondary: string
    light: string
  }
}

export default function DynamicCharts({ question, selectedChartType, selectedMetrics, domainColor }: Props) {
  const { data: chartData, loading, run } = useSimulation()

  // Kick off the simulation when the component mounts or question changes
  useEffect(() => {
    if (question) run(question)
  }, [question, run])

  if (loading) return <div>Loading simulationâ€¦</div>

  const exportData = () => {
    if (!chartData.length) return
    
    const csvContent = [
      ['Country', 'Year', ...selectedMetrics].join(','),
      ...chartData.map((item: any) => 
        [item.country, item.year, ...selectedMetrics.map(metric => item[metric] || '')].join(',')
      )
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `policy_analysis_${Date.now()}.csv`
    a.click()
  }

  const shareAnalysis = () => {
    const shareText = `Policy Analysis: ${question}\n\nKey findings with ${chartData.length} data points.\n\nGenerated by PolMatrix Smart Policy Analyzer`
    
    if (navigator.share) {
      navigator.share({
        title: 'Policy Analysis Results',
        text: shareText,
        url: window.location.href
      })
    } else {
      navigator.clipboard.writeText(shareText)
      alert('Analysis summary copied to clipboard!')
    }
  }

  const renderChart = () => {
    if (!chartData.length) {
      return (
        <div className="h-64 flex items-center justify-center text-gray-500">
          <div className="text-center">
            <p className="text-lg font-medium">No data available</p>
            <p className="text-sm">Try running the simulation again</p>
          </div>
        </div>
      )
    }

    const commonProps = {
      width: '100%',
      height: 400,
      data: chartData,
      margin: { top: 20, right: 30, left: 20, bottom: 60 }
    }

    switch (selectedChartType) {
      case 'line':
        return (
          <ResponsiveContainer {...commonProps}>
            <LineChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label" 
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              <Legend />
              {selectedMetrics.slice(0, 4).map((metric, index) => (
                <Line
                  key={metric}
                  type="monotone"
                  dataKey={metric}
                  stroke={index === 0 ? domainColor.primary : 
                         index === 1 ? domainColor.secondary :
                         index === 2 ? '#96a1b5' : '#ccd8ed'}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )

      case 'bar':
        return (
          <ResponsiveContainer {...commonProps}>
            <BarChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label"
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              <Legend />
              {selectedMetrics.slice(0, 3).map((metric, index) => (
                <Bar
                  key={metric}
                  dataKey={metric}
                  fill={index === 0 ? domainColor.primary : 
                       index === 1 ? domainColor.secondary : '#9CA3AF'}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                />
              ))}
            </BarChart>
          </ResponsiveContainer>
        )

      case 'area':
        return (
          <ResponsiveContainer {...commonProps}>
            <AreaChart data={chartData} stackOffset="sign">
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label"
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              <Legend />
              {selectedMetrics.slice(0, 3).map((metric, index) => (
                <Area
                  key={metric}
                  type="monotone"
                  dataKey={metric}
                  stackId="1"
                  stroke={index === 0 ? domainColor.primary : 
                         index === 1 ? domainColor.secondary : '#9CA3AF'}
                  fill={index === 0 ? domainColor.primary : 
                       index === 1 ? domainColor.secondary : '#9CA3AF'}
                  fillOpacity={0.6}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                />
              ))}
            </AreaChart>
          </ResponsiveContainer>
        )

      case 'scatter':
        if (selectedMetrics.length < 2) {
          return (
            <div className="h-64 flex items-center justify-center text-gray-500">
              <p>Select at least 2 metrics for correlation analysis</p>
            </div>
          )
        }
        return (
          <ResponsiveContainer {...commonProps}>
            <ScatterChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey={selectedMetrics[0]}
                name={selectedMetrics[0].replace(/_/g, ' ')}
                fontSize={12}
              />
              <YAxis 
                dataKey={selectedMetrics[1]}
                name={selectedMetrics[1].replace(/_/g, ' ')}
                fontSize={12}
              />
              <Tooltip 
                cursor={{ strokeDasharray: '3 3' }}
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
                formatter={(value: any, name: string, props: any) => [
                  value,
                  name.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())
                ]}
                labelFormatter={(label: any, payload: any) => 
                  payload && payload[0] && payload[0].payload ? payload[0].payload.label : label
                }
              />
              <Scatter 
                name="Data Points" 
                dataKey={selectedMetrics[1]}
                fill={domainColor.primary}
              />
            </ScatterChart>
          </ResponsiveContainer>
        )

      default:
        return null
    }
  }

  return (
    <div className="bg-white rounded-xl shadow-lg p-8">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Dynamic Visualization</h2>
            <p className="text-gray-600 mt-1">
              Showing {chartData.length} data points from simulation
            </p>
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={exportData}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Export CSV</span>
            </button>
            <button
              onClick={shareAnalysis}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
            >
              <Share2 className="h-4 w-4" />
              <span>Share</span>
            </button>
          </div>
        </div>

        {/* Chart */}
        <div className="bg-gray-50 rounded-lg p-4">
          {renderChart()}
        </div>

        {/* Data Summary */}
        {chartData.length > 0 && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200">
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">{chartData.length}</p>
              <p className="text-sm text-gray-600">Data Points</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">
                {new Set(chartData.map((d: any) => d.country)).size}
              </p>
              <p className="text-sm text-gray-600">Countries</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">
                {new Set(chartData.map((d: any) => d.year)).size}
              </p>
              <p className="text-sm text-gray-600">Time Periods</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">{selectedMetrics.length}</p>
              <p className="text-sm text-gray-600">Metrics</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}