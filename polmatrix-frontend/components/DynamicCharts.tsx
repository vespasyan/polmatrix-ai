'use client'

import React, { useState, useMemo } from 'react'
import { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ScatterChart, Scatter } from 'recharts'
import { TrendingUp, BarChart3, Activity, Zap, Download, Share2 } from 'lucide-react'

interface Analysis {
  domains: string[]
  primary_domain: string
  metrics: string[]
  time_focus: string
  geographic_scope: string
  visualization_type: string
  key_relationships: string[]
  confidence: number
}

interface DomainData {
  count: number
  data: any[]
  error?: string
}

interface DynamicChartsProps {
  analysis: Analysis
  data: Record<string, DomainData>
  question: string
}

const CHART_TYPES = [
  { id: 'line', name: 'Trend Analysis', icon: TrendingUp, description: 'Show trends over time' },
  { id: 'bar', name: 'Comparison', icon: BarChart3, description: 'Compare values across categories' },
  { id: 'area', name: 'Area Chart', icon: Activity, description: 'Show cumulative trends' },
  { id: 'scatter', name: 'Correlation', icon: Zap, description: 'Show relationships between metrics' }
]

const DOMAIN_COLORS = {
  economy: { primary: '#3B82F6', secondary: '#93C5FD', light: '#EBF8FF' },
  health: { primary: '#EF4444', secondary: '#FCA5A5', light: '#FEF2F2' },
  education: { primary: '#8B5CF6', secondary: '#C4B5FD', light: '#F5F3FF' },
  environment: { primary: '#10B981', secondary: '#86EFAC', light: '#F0FDF4' }
}

export default function DynamicCharts({ analysis, data, question }: DynamicChartsProps) {
  const [selectedChartType, setSelectedChartType] = useState(
    analysis.visualization_type === 'trend_analysis' ? 'line' :
    analysis.visualization_type === 'comparison' ? 'bar' :
    analysis.visualization_type === 'correlation' ? 'scatter' : 'line'
  )
  const [selectedDomain, setSelectedDomain] = useState(analysis.primary_domain)
  const [selectedMetrics, setSelectedMetrics] = useState<string[]>(analysis.metrics.slice(0, 3))

  // Transform data for visualization
  const chartData = useMemo(() => {
    const domainData = data[selectedDomain]
    if (!domainData || !domainData.data || domainData.data.length === 0) {
      return []
    }

    // Group data by year and country for better visualization
    const processedData = domainData.data.map(item => {
      const processed: any = {
        id: item.id,
        country: item.country_name,
        year: item.year,
        label: item.label || `${item.country_name} ${item.year}`
      }

      // Add selected metrics to the data
      selectedMetrics.forEach(metric => {
        if (item[metric] !== undefined && item[metric] !== null) {
          processed[metric] = parseFloat(item[metric]) || 0
        }
      })

      return processed
    }).filter(item => {
      // Only include items that have at least one metric value
      return selectedMetrics.some(metric => item[metric] !== undefined && !isNaN(item[metric]))
    })

    return processedData
  }, [data, selectedDomain, selectedMetrics])

  // Get available metrics for the selected domain
  const availableMetrics = useMemo(() => {
    const domainData = data[selectedDomain]
    if (!domainData || !domainData.data || domainData.data.length === 0) {
      return []
    }

    const sampleItem = domainData.data[0]
    return Object.keys(sampleItem).filter(key => 
      !['id', 'geography_id', 'time_id', 'indicator_code', 'source', 'country_name', 'year', 'label'].includes(key) &&
      typeof sampleItem[key] === 'number' || 
      (typeof sampleItem[key] === 'string' && !isNaN(parseFloat(sampleItem[key])))
    )
  }, [data, selectedDomain])

  const domainColor = DOMAIN_COLORS[selectedDomain as keyof typeof DOMAIN_COLORS] || DOMAIN_COLORS.economy

  const exportData = () => {
    const csvContent = [
      ['Country', 'Year', ...selectedMetrics].join(','),
      ...chartData.map(item => 
        [item.country, item.year, ...selectedMetrics.map(metric => item[metric] || '')].join(',')
      )
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `policy_analysis_${selectedDomain}_${Date.now()}.csv`
    a.click()
  }

  const shareAnalysis = () => {
    const shareText = `Policy Analysis: ${question}\n\nKey findings for ${selectedDomain} domain with ${chartData.length} data points.\n\nGenerated by PolMatrix Smart Policy Analyzer`
    
    if (navigator.share) {
      navigator.share({
        title: 'Policy Analysis Results',
        text: shareText,
        url: window.location.href
      })
    } else {
      navigator.clipboard.writeText(shareText)
      alert('Analysis summary copied to clipboard!')
    }
  }

  const renderChart = () => {
    if (!chartData.length) {
      return (
        <div className="h-64 flex items-center justify-center text-gray-500">
          <div className="text-center">
            <p className="text-lg font-medium">No data available</p>
            <p className="text-sm">Try selecting different metrics or domain</p>
          </div>
        </div>
      )
    }

    const commonProps = {
      width: '100%',
      height: 400,
      data: chartData,
      margin: { top: 20, right: 30, left: 20, bottom: 60 }
    }

    switch (selectedChartType) {
      case 'line':
        return (
          <ResponsiveContainer {...commonProps}>
            <LineChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label" 
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              
              <Legend />
              {selectedMetrics.slice(0, 4).map((metric, index) => (
                <Line
                  key={metric}
                  type="monotone"
                  dataKey={metric}
                  stroke={index === 0 ? domainColor.primary : 
                         index === 1 ? domainColor.secondary :
                         index === 2 ? '#96a1b5' : '#ccd8ed'}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )

      case 'bar':
        return (
          <ResponsiveContainer {...commonProps}>
            <BarChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label"
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              <Legend />
              {selectedMetrics.slice(0, 3).map((metric, index) => (
                <Bar
                  key={metric}
                  dataKey={metric}
                  fill={index === 0 ? domainColor.primary : 
                       index === 1 ? domainColor.secondary : '#9CA3AF'}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                />
              ))}
            </BarChart>
          </ResponsiveContainer>
        )

      case 'area':
        return (
          <ResponsiveContainer {...commonProps} >
            <AreaChart data={chartData} stackOffset="sign">
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey="label"
                angle={-45}
                textAnchor="end"
                height={100}
                fontSize={12}
              />
              <YAxis fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
              />
              <Legend />
              {selectedMetrics.slice(0, 3).map((metric, index) => (
                <Area
                  key={metric}
                  type="monotone"
                  dataKey={metric}
                  stackId="1"
                  stroke={index === 0 ? domainColor.primary : 
                         index === 1 ? domainColor.secondary : '#9CA3AF'}
                  fill={index === 0 ? domainColor.primary : 
                       index === 1 ? domainColor.secondary : '#9CA3AF'}
                  fillOpacity={0.6}
                  name={metric.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                />
              ))}
            </AreaChart>
          </ResponsiveContainer>
        )

      case 'scatter':
        if (selectedMetrics.length < 2) {
          return (
            <div className="h-64 flex items-center justify-center text-gray-500">
              <p>Select at least 2 metrics for correlation analysis</p>
            </div>
          )
        }
        return (
          <ResponsiveContainer {...commonProps}>
            <ScatterChart data={chartData}>
              <CartesianGrid 
                stroke="var(--color-border)" 
                strokeDasharray="5 5" 
                strokeOpacity={0.8} 
                strokeWidth={2} 
                vertical 
                horizontal 
              />
              <XAxis 
                dataKey={selectedMetrics[0]}
                name={selectedMetrics[0].replace(/_/g, ' ')}
                fontSize={12}
              />
              <YAxis 
                dataKey={selectedMetrics[1]}
                name={selectedMetrics[1].replace(/_/g, ' ')}
                fontSize={12}
              />
              <Tooltip 
                cursor={{ strokeDasharray: '3 3' }}
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: `1px solid ${domainColor.primary}`,
                  borderRadius: '8px'
                }}
                formatter={(value: any, name: string, props: any) => [
                  value,
                  name.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
                ]}
                labelFormatter={(label: any, payload: any) => 
                  payload && payload[0] && payload[0].payload ? payload[0].payload.label : label
                }
              />
              <Scatter 
                name="Data Points" 
                dataKey={selectedMetrics[1]}
                fill={domainColor.primary}
              />
            </ScatterChart>
          </ResponsiveContainer>
        )

      default:
        return null
    }
  }

  return (
    <div className="bg-white rounded-xl shadow-lg p-8">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Dynamic Visualization</h2>
            <p className="text-gray-600 mt-1">
              Showing {chartData.length} data points for {selectedDomain} domain
            </p>
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={exportData}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Export CSV</span>
            </button>
            <button
              onClick={shareAnalysis}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
            >
              <Share2 className="h-4 w-4" />
              <span>Share</span>
            </button>
          </div>
        </div>

        {/* Controls */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Domain Selection */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Domain</label>
            <select
              value={selectedDomain}
              onChange={(e) => setSelectedDomain(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              {analysis.domains.map(domain => (
                <option key={domain} value={domain}>
                  {domain.charAt(0).toUpperCase() + domain.slice(1)} ({data[domain]?.count || 0} records)
                </option>
              ))}
            </select>
          </div>

          {/* Chart Type Selection */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Visualization Type</label>
            <select
              value={selectedChartType}
              onChange={(e) => setSelectedChartType(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              {CHART_TYPES.map(type => (
                <option key={type.id} value={type.id}>
                  {type.name} - {type.description}
                </option>
              ))}
            </select>
          </div>

          {/* Metrics Selection */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Metrics ({selectedMetrics.length} selected)
            </label>
            <div className="max-h-32 overflow-y-auto space-y-1 border border-gray-300 rounded-lg p-2">
              {availableMetrics.map(metric => (
                <label key={metric} className="flex items-center space-x-2 text-sm">
                  <input
                    type="checkbox"
                    checked={selectedMetrics.includes(metric)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedMetrics([...selectedMetrics, metric])
                      } else {
                        setSelectedMetrics(selectedMetrics.filter(m => m !== metric))
                      }
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="capitalize">
                    {metric.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </span>
                </label>
              ))}
            </div>
          </div>
        </div>

        {/* Chart */}
        <div className="bg-gray-50 rounded-lg p-4">
          {renderChart()}
        </div>

        {/* Data Summary */}
        {chartData.length > 0 && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200">
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">{chartData.length}</p>
              <p className="text-sm text-gray-600">Data Points</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">
                {new Set(chartData.map(d => d.country)).size}
              </p>
              <p className="text-sm text-gray-600">Countries</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">
                {new Set(chartData.map(d => d.year)).size}
              </p>
              <p className="text-sm text-gray-600">Time Periods</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">{selectedMetrics.length}</p>
              <p className="text-sm text-gray-600">Metrics</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}